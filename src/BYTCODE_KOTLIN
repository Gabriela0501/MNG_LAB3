//RÓŻNICY POMIĘDZY BYTECODE_JAVA A BYTECODE_KOTLIN:
//1. są tu wprowadzone dodatkowe metadane potrzebne programowi Kotlin, takiej instrukcji nie było w bytecodzie javy
//2. deklaracja instancji klasy się zmieniła z INNERCLASS java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup na LSortBabel; INSTANCE
//3. w bytecode z Kotlina mamy kilka warunków na początku, iż stos lub paramentr nie może być NULL, czego nie ma w bytecode z javy
//4. w tym bytecode dodajemy na stos ciągi znaków w niektórych miejscach, a w bytecode_java dodjemy tylko liczby
//5. tutaj mamy również dodatwową deklarację zmiennej - LOCALVARIABLE this LSortBabel; L0 L15 0, która oznacza deklarację zmiennej this, która będzie dostępna pomiedzy instrukcjami Lo i L15, w bytecode java też ją mamy ale tylko w metodzie konstruktora
//6. możemy tu zauważyć dodatkową metodę static <clinit>()V, której w bytecode_java nie ma, tam nie tworzymy nowego obiektu, a tutaj tworzymy.
//7. w tym bytecodzie nie mamy również metody konkatenacji stałych łańcuchowych w taki sposób, aby zminimalizować czas wykonania, która jest zawarta w bytecode_java
//8. Kompilator Java kompiluje plik .Java do pliku .class. Natomiast kompilator Kotlin kompiluje plik .kt do pliku .class
//9. format klas jest inny w bytecode java jest to 61.0, a tutaj 52.0, flagi dostępu klas również się różnią
//Na pewno można zauważyć, iż bytecode Kotlina jest o około 100 linijek dłuższy niż bytecode Javy i zawiera zdecydowanie wiecej instrucji, dlatego jest dłuższy
// Bytecode Kotlin w porównaniu z Bytecode Java posiada aż 22 etykiety cześci kodu L, natomiast w bytecode javy jest to 31 etykiet.



// class version 52.0 (52)
// access flags 0x31
public final class SortBabel {

  // compiled from: SortBabel.kt

  @Lkotlin/Metadata;(mv={1, 5, 1}, k=1, xi=48, d1={"\u0000&\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\u0008\u0002\n\u0002\u0010\u0011\n\u0002\u0010\u000e\n\u0002\u0008\u0002\u0008\u00c6\u0002\u0018\u00002\u00020\u0001B\u0007\u0008\u0002\u00a2\u0006\u0002\u0010\u0002J\u000e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006J\u001b\u0010\u0007\u001a\u00020\u00042\u000c\u0010\u0008\u001a\u0008\u0012\u0004\u0012\u00020\n0\u0009H\u0007\u00a2\u0006\u0002\u0010\u000b\u00a8\u0006\u000c"}, d2={"LSortBabel;", "", "()V", "bubbleSort", "", "arr", "", "main", "args", "", "", "([Ljava/lang/String;)V", "ROK 3"})

  // access flags 0x19
  public final static LSortBabel; INSTANCE //ta instrukcja to deklaracja instancji klasy LSortBabel
  @Lorg/jetbrains/annotations/NotNull;() // invisible

  // access flags 0x2
  private <init>()V
   L0
    LINENUMBER 1 L0
    ALOAD 0 //ta instrukcja ładuje na stos referencję do obiektu, którego konstruktor jest wywoływany
    INVOKESPECIAL java/lang/Object.<init> ()V //ta instrukcja wywołuje konstruktor klasy nadrzędnej
    RETURN //ta intrukcja zwraca z metody wartość null
   L1
    LOCALVARIABLE this LSortBabel; L0 L1 0
    MAXSTACK = 1 //maks liczba elementów stosu
    MAXLOCALS = 1 //maks liczba lokalnych zmiennych

  // access flags 0x11
  public final bubbleSort([I)V //sygnatura metody bubbleSort, która przyjmuje jako swój jedyny parametr tablicę liczb całkowitych i nic nie zwraca
    // annotable parameter count: 1 (invisible)
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0 //ta instrukcja wskazuje nam na parametrze metody, że parametr nie może byc nullem
   L0
    ALOAD 1
    LDC "arr" //ta instrukcja umieszcza na stosie ciąg znaków arr
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkNotNullParameter (Ljava/lang/Object;Ljava/lang/String;)V //ta instrukcja to wywołanie statycznej metody, przekazując tablicę liczb całkowitych i ciąg znaków arr jak argumenty, sluży ona do tego by sprawdzić czy tablica jest null czy nie i wyrzuci warunek jesli jest, metoda ta nie wraca niczego
   L1
    LINENUMBER 3 L1
    ALOAD 1
    ARRAYLENGTH
    ISTORE 2
   L2
    LINENUMBER 4 L2
    ICONST_0
    ISTORE 3
    ILOAD 2
    ICONST_1
    ISUB
    ISTORE 4
    ILOAD 3
    ILOAD 4
    IF_ICMPGE L3
   L4
   FRAME APPEND [I I I]
    ILOAD 3
    ISTORE 5
   L5
    IINC 3 1
   L6
    LINENUMBER 5 L6
    ICONST_0
    ISTORE 6
    ILOAD 2
    ILOAD 5
    ISUB
    ICONST_1
    ISUB
    ISTORE 7
    ILOAD 6
    ILOAD 7
    IF_ICMPGE L7
   L8
   FRAME APPEND [I I I]
    ILOAD 6
    ISTORE 8
   L9
    IINC 6 1
   L10
    LINENUMBER 6 L10
    ALOAD 1
    ILOAD 8
    IALOAD
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    IALOAD
    IF_ICMPLE L11
   L12
    LINENUMBER 8 L12
    ALOAD 1
    ILOAD 8
    IALOAD
    ISTORE 9
   L13
    LINENUMBER 9 L13
    ALOAD 1
    ILOAD 8
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    IALOAD
    IASTORE
   L14
    LINENUMBER 10 L14
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    ILOAD 9
    IASTORE
   L11
    LINENUMBER 5 L11
   FRAME APPEND [I]
    ILOAD 6
    ILOAD 7
    IF_ICMPLT L8
   L7
    LINENUMBER 4 L7
   FRAME CHOP 1
    ILOAD 3
    ILOAD 4
    IF_ICMPLT L4
   L3
    LINENUMBER 14 L3
   FRAME CHOP 3
    RETURN
   L15
    LOCALVARIABLE temp I L13 L11 9
    LOCALVARIABLE j I L9 L7 8
    LOCALVARIABLE i I L5 L3 5
    LOCALVARIABLE n I L2 L15 2
    LOCALVARIABLE this LSortBabel; L0 L15 0
    LOCALVARIABLE arr [I L0 L15 1
    MAXSTACK = 5
    MAXLOCALS = 10

  // access flags 0x19
  public final static main([Ljava/lang/String;)V
  @Lkotlin/jvm/JvmStatic;()
    // annotable parameter count: 1 (invisible)
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC "args"
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkNotNullParameter (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 18 L1
    BIPUSH 7
    NEWARRAY T_INT
    ASTORE 2
    ALOAD 2
    ICONST_0
    ICONST_5
    IASTORE
    ALOAD 2
    ICONST_1
    ICONST_2
    IASTORE
    ALOAD 2
    ICONST_2
    BIPUSH 6
    IASTORE
    ALOAD 2
    ICONST_3
    ICONST_1
    IASTORE
    ALOAD 2
    ICONST_4
    ICONST_3
    IASTORE
    ALOAD 2
    ICONST_5
    BIPUSH 9
    IASTORE
    ALOAD 2
    BIPUSH 6
    ICONST_4
    IASTORE
    ALOAD 2
    ASTORE 1
   L2
    ICONST_0
    ISTORE 2
   L3
    LINENUMBER 22 L3
    ICONST_0
    ISTORE 3
    ALOAD 1
    ARRAYLENGTH
    ICONST_1
    ISUB
    ISTORE 4
    ILOAD 3
    ILOAD 4
    IF_ICMPGE L4
   L5
   FRAME FULL [[Ljava/lang/String; [I I I I] []
    ILOAD 3
    ISTORE 5
   L6
    IINC 3 1
   L7
    LINENUMBER 23 L7
    ICONST_0
    ISTORE 6
    ALOAD 1
    ARRAYLENGTH
    ILOAD 5
    ISUB
    ICONST_1
    ISUB
    ISTORE 7
    ILOAD 6
    ILOAD 7
    IF_ICMPGE L8
   L9
   FRAME APPEND [I I I]
    ILOAD 6
    ISTORE 8
   L10
    IINC 6 1
   L11
    LINENUMBER 24 L11
    ALOAD 1
    ILOAD 8
    IALOAD
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    IALOAD
    IF_ICMPLE L12
   L13
    LINENUMBER 25 L13
    ALOAD 1
    ILOAD 8
    IALOAD
    ISTORE 2
   L14
    LINENUMBER 26 L14
    ALOAD 1
    ILOAD 8
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    IALOAD
    IASTORE
   L15
    LINENUMBER 27 L15
    ALOAD 1
    ILOAD 8
    ICONST_1
    IADD
    ILOAD 2
    IASTORE
   L12
    LINENUMBER 23 L12
   FRAME APPEND [I]
    ILOAD 6
    ILOAD 7
    IF_ICMPLT L9
   L8
    LINENUMBER 22 L8
   FRAME CHOP 1
    ILOAD 3
    ILOAD 4
    IF_ICMPLT L5
   L4
    LINENUMBER 33 L4
   FRAME CHOP 3
    LDC "Posortowana tablica: "
    ASTORE 3
    ICONST_0
    ISTORE 4
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    ALOAD 3
    INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/Object;)V
   L16
    LINENUMBER 34 L16
    ICONST_0
    ISTORE 3
    ALOAD 1
    ARRAYLENGTH
    ICONST_M1
    IADD
    ISTORE 4
    ILOAD 3
    ILOAD 4
    IF_ICMPGT L17
   L18
   FRAME SAME
    ILOAD 3
    ISTORE 5
   L19
    IINC 3 1
   L20
    LINENUMBER 35 L20
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.<init> ()V
    ALOAD 1
    ILOAD 5
    IALOAD
    INVOKEVIRTUAL java/lang/StringBuilder.append (I)Ljava/lang/StringBuilder;
    BIPUSH 32
    INVOKEVIRTUAL java/lang/StringBuilder.append (C)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    ASTORE 6
    ICONST_0
    ISTORE 7
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    ALOAD 6
    INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/Object;)V
   L21
    LINENUMBER 34 L21
    ILOAD 3
    ILOAD 4
    IF_ICMPLE L18
   L17
    LINENUMBER 37 L17
   FRAME SAME
    RETURN
   L22
    LOCALVARIABLE j I L10 L8 8
    LOCALVARIABLE i I L6 L4 5
    LOCALVARIABLE i I L19 L17 5
    LOCALVARIABLE array [I L2 L22 1
    LOCALVARIABLE temp I L3 L22 2
    LOCALVARIABLE args [Ljava/lang/String; L0 L22 0
    MAXSTACK = 5
    MAXLOCALS = 9

  // access flags 0x8
  static <clinit>()V
    NEW SortBabel //ta instrukcja tworzy nwy obiekt typu SortBabel na stosie
    DUP //ta instrukcja duplikuje referencje na obiekt na stosie,aby można było ją wykorzystać do wykonania kolejnych instrukcji
    INVOKESPECIAL SortBabel.<init> ()V
    PUTSTATIC SortBabel.INSTANCE : LSortBabel; //ta instrukcja umieszcza nowo utworzona referencje w statycznym polu INSTANCE klasy SortBabel
    RETURN
    MAXSTACK = 2 //ta intrukcja oznacza maks liczbę wartości, które mogą znajdować się na stosie
    MAXLOCALS = 0
}
